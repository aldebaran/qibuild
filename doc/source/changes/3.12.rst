v3.12
======

general
-------

* Add a new command, ``qisys``. Used for actions that are common to
  all other actions

* Always generate crash reports with ``cgitb``. Also, deprecate ``--backtrace``
  option, it's always on.

* Fix extracting archives created with ``zip --symlinks``

* Fix crash when current working directory does not exist

* Test suite now runs without errors on Linux, Mac and Windows.

qiproject.xml
+++++++++++++


* Syntax for setting the version number of the projects changed

  .. code-block:: xml

      <!-- old -->
      <project version="3">
        <qibuild name="foo" version="0.42" />
        <qidoc name="foo" type="sphinx" />
      </project>

      <!-- new: -->
      <project format="3">
         <version>0.42</version>
          <qibuild name="foo" />
          <qidoc name="foo" type="sphinx" />
       </project>

  The ``version`` tag in the ``<project>`` tag was misleading, it's
  actually the format version supported by qibuild tools.

  Also, having a ``version`` tag outside ``<qibuild>`` allows to set
  the version number for the ``qidoc`` projects too


qibuild
--------

* ``qibuild configure`` : do not re-run CMake on the dependencies if the cache is
  up-to-date.

* Add support for meta projects, that is a project that only has dependencies
  to other projects, but no source code or ``CMakeLists.txt``

  To create a ``meta`` project, use a ``meta`` attribute in the ``qiproject.xml``,
  like so:

  .. code-block:: xml

      <project format="3">
        <qibuild name="foo" meta="true">
          <depends runtime="true" names="bar baz" >
        </qibuild>
      </project>

* Honor ``qiproject.xml`` when looking for dependencies in the toolchain.

  Previously all packages in the toolchain were taken into account.

  You can set ``QIBUILD_LOOSE_DEPS_RESOLUTION=1`` environment variable
  to get back the old behavior

* Set ``DYLD_LIBRARY_PATH`` and ``DYLD_FRAMEWORK_PATH`` environment variables when
  running ``qibuild configure`` on OS X.

  Use these variables in ``qi_generate_src`` and ``qi_generate_header`` custom commands.

  This workarounds ``DYLD_`` variables not being forwarded because of
  OS X 10.11 System Integrity Protection

* ``qibuild install`` without argument no longer installs the tests.

* ``qibuild package``: add ``--version`` to override settings in ``qiproject.xml``

* ``qibuild package``: add git URL to generated ``package.xml`` file

  Note that the syntax changed lightly:

  Before:

  .. code-block:: xml

    <scm>
      <git revision="98a67de" />
    </scm>

  After:

  .. code-block:: xml

    <scm>
      <git>
        <revision>98a67de</revision>
        <url>git@example.com:foo.git</url>
      </git>
    </scm>

* ``qibuild configure --trace`` calls ``CMake`` with ``--trace-expand`` option
  if version is greater than 3.4

* ``qibuild deploy``: allow to use simple URLs like ``<host>:<deploy-dir>``

* Add support for parallel builds. For instance, when using
  ``qibuild make -j8 -J2``, ``qibuild`` will spawn two threads, each of
  them running the build with 8 parallel jobs.

  .. note:: This feature is best used in conjunction with a distributed
            computing system such as ``incredibuild`` or ``distcc``


qicd
----

* Add ``-b`` option to go to a qibuild project given its name. Useful
  when the name of the qibuild project differs from its path in the worktree.
  Also, make sure the exit code of ``qicd`` is correct.

  The ``qibuild.sh`` in ``etc/qibuild.sh`` has been updated, so if
  you installed ``qibuild`` via ``pip``, you should patch your ``~/.profile`` or
  equivalent to have:

  .. code-block:: diff

    function qicd {
    -  p=$(python -m 'qicd' $1)
    +  p=$(python -m 'qicd' $@)
      if [[ $? -ne 0 ]]; then
    -    return
    +    return 1
      fi
      cd ${p}
    }

qidoc
-----

* Version can now be set in 3 places, in this order:

  * From the command line with ``qidoc build --version``
  * ``conf.in.py`` or ``Doxyfile.in``
  * From ``qiproject.xml``

qipkg
-----

* ``qipkg make-package``: add ``--no-toolchain-packages`` to *not* include
  packages from toolchain in the generated ``.pkg`` file.
  Note that this will speed up development, at the cost of generating packages
  that may no longer work on a different NAOqi version

qisrc
------

* ``qisrc create`` used with a template no longer copies hidden files
  (by hidden we mean "starting with a dot")

* ``qisrc push``: allow specifying destination branch as first argument.

  For instance, while on ``perso`` branch, you can use ``qisrc push master``.
  This will push all the commits from ``perso`` branch that are not yet on
  ``master`` branch for review. (Behind the scenes, ``qisrc`` will call
  ``git push gerrit perso:refs/for/master``)

  You can also specify the local ref by using ":" in the first argument.

  For instance, to push everything but the last commit, you can use
  ``qisrc push HEAD~1:master``

* Add support for fixed refs (or tags) in qisrc manifest

  .. code-block:: xml

    <repo project="foo/bar.git" ref="v0.1" />

* Fix ``qisrc info`` when there is no manifest

* ``qisrc init``: add ``--clone OTHER_WORKTREE`` to create a new worktree
  without having to fetch everything from the remote server, and use local
  clones from ``OTHER_WORKTREE`` instead

* ``qisrc push``: add ``-d, --draft`` option to push drafts to ``gerrit``

* ``qisrc diff``, ``qisrc log``: better output when branches have diverged

* Fix using ``qisrc log`` when output is not a terminal

* ``qisrc foreach --all`` is deprecated, use ``qisys foreach`` instead

* ``qisrc rm-group``: add ``--from-disk`` to also remove projects sources
  from disk. Use with care.

* Actually support orphaned projects. (The feature was documented but not
  implemented)

* Simplify ``qisrc rebase``: it now does much less safety checks, which
  renders the command actually usable. (Previously it was impossible to
  run the command twice for instance).

  Also, when used with ``--push`` always use ``--force`` (if you rebase
  you *want* to rewrite history), so the ``--force`` option of
  ``qisrc rebase`` is gone.

  Lastly, ``qisrc rebase --push`` only pushes repositories that were
  not already rebased.

* Add ``qisrc push --force``

qisys
-----

* Add ``qisys list`` to list all the paths known by the ``qiBuild`` tools.

* Add ``qisys foreach`` to run a command on all projects in the worktree

qitest
------

* Fix using ``qitest --coverage`` with custom build prefix. Note that
  the fix uses an undocumented feature of ``gocvr``. See
  https://github.com/gcovr/gcovr/issues/61 for more details

* Add ``qitest run --cov-exclude`` to specify excludes patterns for
  ``gcovr``. Default is ``[".*test.*", ".*external.*", ".*examples.*]``

  You can use ``--cov-exclude=NONE`` to include everything.

cmake
-----

* Fix generation of installed ``foo-config.cmake`` files when
  used with ``qi_create_lib(foo foo.cpp SUBFOLDER bar)``
  (regression since ``3.10``)

* Fix using ``qi_get_git_version`` in some corner cases.

* ``qi_swig_wrap_python`` : add ``NO_CPLUSPLUS`` to allow
  building ``swig`` extensions as ``C`` code. Default is ``C++``

* ``qi_add_optional_package(FOO)`` used to be behave incorrectly
  when ``WITH_FOO`` was enabled.
  More precisely, dependencies were ignored, leading to compile failures.

* Modules:

  * Fix using ``intl`` on mac when ``gettext`` has been installed
    with ``homebrew``

  * Support ``opencv3``.

  * Fix finding Python libraries on Mac when run from a ``virtualenv``

qitoolchain
-----------

* Add checksum support. Feeds can now specify a ``checksum`` attribute for each
  downloaded package, and qitoolchain will check it upon download. The ``create``
  and ``update`` subcommands now provide an ``--update-checksums`` switch, for
  use with local toolchain feeds.
