v3.12
======

qiproject.xml
--------------

* Syntax for setting the version number of the projects changed

  .. code-block:: xml

      <!-- old -->
      <project version="3">
        <qibuild name="foo" version="0.42" />
        <qidoc name="foo" type="sphinx" />
      </project>

      <!-- new: -->
      <project format="3">
         <version>0.42</version>
          <qibuild name="foo" />
          <qidoc name="foo" type="sphinx" />
       </project>

  The ``version`` tag in the ``<project>`` tag was misleading, it's
  actually the format version supported by qibuild tools.

  Also, having a ``version`` tag outside ``<qibuild>`` allows to set
  the version number for the ``qidoc`` projects too


qibuild
--------

* Add support for meta projects, that is a project that only has dependencies
  to other projects, but no source code or ``CMakeLists.txt``

  To create a ``meta`` project, use a ``meta`` attribute in the ``qiproject.xml``,
  like so:

  .. code-block:: xml

      <project format="3">
        <qibuild name="foo" meta="true">
          <depends runtime="true" names="bar baz" >
        </qibuild>
      </project>

* Honor ``qiproject.xml`` when looking for dependencies in the toolchain.

  Previously all packages in the toolchain were taken into account.

  You can set ``QIBUILD_LOOSE_DEPS_RESOLUTION=1`` environment variable
  to get back the old behavior

* Set ``DYLD_LIBRARY_PATH`` and ``DYLD_FRAMEWORK_PATH`` environment variables when
  running ``qibuild configure`` on OS X.

  Use these variables in ``qi_generate_src`` and ``qi_generate_header`` custom commands.

  This workarounds ``DYLD_`` variables not being forwarded because of
  OS X 10.11 System Integrity Protection

* ``qibuild package``: add ``--version`` to override setting in ``qiproject.xml``

* ``qibuild package``: add git URL to generated ``package.xml`` file

  Note that the syntax changed lightly:

  Before:

  .. code-block:: xml

    <scm>
      <git revision="98a67de" />
    </scm>

  After:

  .. code-block:: xml

    <scm>
      <git>
        <revision>98a67de</revision>
        <url>git@example.com:foo.git</url>
      </git>
    </scm>

qicd
----

* Add ``-b`` option to go to a qibuild project given its name. Useful
  when the name of the qibuild project differs from its path in the worktree.
  Also, make sure the exit code of ``qicd`` is correct.

  The ``qibuild.sh`` in ``etc/qibuild.sh`` has been updated, so if
  you installed ``qibuild`` via ``pip``, you should patch your ``~/.profile`` or
  equivalent to have:

  .. code-block:: diff

    function qicd {
    -  p=$(python -m 'qicd' $1)
    +  p=$(python -m 'qicd' $@)
      if [[ $? -ne 0 ]]; then
    -    return
    +    return 1
      fi
      cd ${p}
    }

qidoc
-----

* Version can now be set in 3 places, in this order:

  * From the command line with ``qidoc build --version``
  * ``conf.in.py`` or ``Doxyfile.in``
  * From ``qiproject.xml``

qisrc
------

* ``qisrc push``: allow specifying destination branch as first argument.

  For instance, while on ``perso`` branch, you can use ``qisrc push master`` to
  push run ``git push gerrit perso:refs/for/master``. This will push all
  the commits from ``perso`` branch that are not yet on ``master`` branch
  for review.

  You can also specify the local ref by using ":" in the first argument.

  For instance, to push everything but the last commit, you can use
  ``qisrc push HEAD~1:master``

* Add support for fixed refs (or tags) in qisrc manifest

  .. code-block:: xml

    <repo project="foo/bar.git" ref="v0.1" />

* Fix ``qisrc info`` when there is no manifest

cmake
-----

* Fix generation of installed ``foo-config.cmake`` files when
  used with ``qi_create_lib(foo foo.cpp SUBFOLDER bar)``
  (regression since ``3.10``)

* ``qi_swig_wrap_python`` : add ``NO_CPLUSPLUS`` to allow
  build swig extensions as ``C`` code. Default is ``C++``
